  
List<String> ENVIROMENTS = ["test","dev","Prod","release"]
pipeline { 
 
    environment { 
        registry = "ezzathassan/newrepo1" 
        registryCredential = 'Dockerhub' 
        dockerImage = '' 
    }
    agent any 
     parameters{
      ENV1(name: 'ENVIROMENT' , ENV1: ENVIROMENTS, description: 'Enviroment')
     }
    stages {
        
          stage('Credentials') {
             steps{
             withAWS(credentials: 'aws-cred') {
                 sh "aws eks --region us-east-1 update-kubeconfig --name NTI-EKS"
               }
              }
             }
          stage('Kube Credentials') {
             steps{
             withCredentials([file(credentialsId: 'kube-eks', variable: 'KUBECONFIG')]){
              sh "kubectl get deployments"
              }
             }        
           }  
          stage('Build according to choosed branch'){
            steps{
              script{
                if(params.ENV1 == "release"){
                    git 'https://github.com/ezzat09/BakeHouse'
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push()
                  } 
                }
                else if (params.ENV1 == "dev"){
                 sh "kubectl create ns dev"
                 sh "git checkout dev"
                 sh "kubectl apply -f deployment.yaml -n"
                 sh "kubectl apply -f service.yaml -n"
                }
                 else if(params.ENV1 == "test"){
                 sh "kubectl create ns test"
                 sh "git checkout test"
                 sh "kubectl apply -f deployment.yaml -n"
                 sh "kubectl apply -f service.yaml -n"  
                }
                else if(params.ENV1 == "Prod"){
                 sh "kubectl create ns Prod"
                 sh "git checkout Prod"
                 sh "kubectl apply -f deployment.yaml -n"
                 sh "kubectl apply -f service.yaml -n"  
                }
              }  
            }
          }     
        }
      }
